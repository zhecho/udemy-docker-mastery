
*******************************************************************************
*                                Docker Notes                                 *
*******************************************************************************
 Linux installation check official docker documantation
  Install docker  and check with version
    $ docker version
    Client: Docker Engine - Community
     Version:           19.03.5
     API version:       1.40
     Go version:        go1.12.12
     Git commit:        633a0ea838
     Built:             Wed Nov 13 07:29:52 2019
     OS/Arch:           linux/amd64
     Experimental:      false
    
    Server: Docker Engine - Community
     Engine:
      Version:          19.03.5
      API version:      1.40 (minimum version 1.12)
      Go version:       go1.12.12
      Git commit:       633a0ea838
      Built:            Wed Nov 13 07:28:22 2019
      OS/Arch:          linux/amd64
      Experimental:     false
     containerd:
      Version:          1.2.10
      GitCommit:        b34a5c8af56e510852c35414db4c1f4fa6172339
     runc:
      Version:          1.0.0-rc8+dev
      GitCommit:        3e425f80a8c931f88e6d94a8c831b9d5aa481657
     docker-init:
      Version:          0.18.0
      GitCommit:        fec3683
     zen0@42 ~/prj/udemy-docker-mastery (master

  Install docker-machine & docker-compose and check versions with:
    - docker-machine version
        $ docker-machine version
        docker-machine version 0.16.2, build bd45ab13
         zen0@42 ~/prj/udemy-docker-mastery (master)
    - docker-compose version
        $ docker-compose version
        docker-compose version 1.25.1, build a82fef07
        docker-py version: 4.1.0
        CPython version: 3.7.4
        OpenSSL version: OpenSSL 1.1.0l  10 Sep 2019
         zen0@42 ~/prj/udemy-docker-mastery (master)
        $

 - Run nginx container in foreground 
    $ docker container run --publish 80:80 nginx
 - Run nginx container in background
    $ docker container run --publish 80:80 --detach nginx
 - List of running containers 
    $ docker container ls 
 - Stop running docker with "stop" and first unique numbers of ID
    $ docker container ls
    $ docker stop 15b
 - Specify container name with "--name"
    $ docker container run --publish 80:80 --detach --name webhost nginx
 - Show Logs on webhost container
    $ docker container logs webhost
 - List running processes on webhost container 
    $ docker container top webhost
 - List all available commands 
    $ docker container --help
 - Remove Non-running containers 
    $ docker container rm <id1> <id2> ....
 - Remove running containers  "-f" - force
    $ docker container rm -f <id1> <id2> ....
 - List available images
    $ docker image ls


 Assignment: Manage multiple Containers
    -d - detach
    -e - (--env) assign environment variables 
    --help - check all help

 Running MySQL with random root password and check logs
    $ docker container run --publish 127.0.0.1:3306:3306 -d --name db -e MYSQL_RANDOM_ROOT_PASSWORD=yes mysql
    $ docker container run --name webserver -p 127.0.0.1:8080:80 -d nginx


 Container processes
    $ docker container top db
     
 Container Metadata configuration - check how container is started 
    $ docker container inspect db
    
 Container Stats - check container performance / stats
    $ docker container stats


*************************************
*  Getting Shell inside Containers  *
*************************************
    -i - interactive
    -t - tty
    # start bash
    $ docker container run -it --name proxy nginx bash

    # start basic ubuntu dist 
    $ docker container run -it --name ubuntu ubuntu


    # running the same instance 
    $ docker container start -ai ubuntu

    # run command on running container
    $ docker container exec -it db bash

 Using Alpine image
    $ docker pull alpine
    $ docker container run -it alpine

    # using apk package manager of alpine 

    $ docker container inspect --format '{{ .NetworkSettings.IPAddress }}' lala

*************************************
*  Docker Network Concepts and CLI  *
*************************************
 bridge  - default nated network trough the host ip

 CLI
    $ docker network ls
    $ docker network inspect
    $ docker network create --driver
    $ docker network connect
    $ docker network disconnect

 Show bridge configuration 
    $ docker network inspect bridge

 Create network my_net
    $ docker network create my_net
    
 Attach container to network 
    $ docker container run --name nginx -d --network my_net nginx
    # show network config
    $ docker network inspect my_net
    
    # attach containers to network II way     
    $ docker network connect my_net lala
    $ docker network connect my_net nginx


*********************************
*  Assignment: CLI APP Testing  *
*********************************

  docker container run --name ubuntu -d -it ubuntu:14.04 bash
    apt update && apt install curl
  docker container run --name centos -d -it centos:7 bash 
    yum install curl

**************************************
*  Assignment: DNS round robin Test  *
**************************************
  docker network create net1
  docker container run -d --net net1 --network-alias lala elasticsearch:2
  docker container run -d --net net1 --network-alias lala elasticsearch:2

  docker container run --net net1 -it ubuntu 
    apt update && apt install -y dnsutils iputils-ping curl 
    dig lala
    ping lala - check out ip 
    ping lala - check out returing ip 
    curl -s lala:9200 
    curl -s lala:9200 

 Attach/Detach to container process
    docker container attach <cont_name>
    Ctrl + p + Ctrl + q - detach from container without exit 
    Ctrl + c / Ctrl + D - detach and exit

*******************************************************************************
*                              Container Images                               *
*******************************************************************************

Images are made up of file system changes and metadata
Each Layer is identified and only stored Once in the host 
COW - Copy on Write 

hub.docker.org
https://github.com/docker-library/official-images

  docker pull nginx
  docker pull nginx:1.11.9
  docker pull nginx:1.11.9-alpine

  docker image ls

History of the Container layers
  docker history ubuntu:latest
  docker history nginx:latest

Inspect -- show Metadata how this image will run 
  docker image inspect nginx


Login to hub.docker.com (after sign up and make token)
  docker login --username
  docker logout

Images, tag, etc.
  docker image tag --help
  docker image tag nginx bredfisher/nginx - copy original to bredfisher/..
  docker image tag bredfisher/nginx bredfisher/nginx:lala
  docker image push bredfisher/nginx:lala - push to hub.docker.com

*******************************************************************************
*                               Building Images                               *
*******************************************************************************

  docker build -f some-docker-file

Docker file:
  FROM      - based on some of: debian:jessie | scratch | alpine:latest | ....
  ENV       - to pass environment variables in the image
  RUN       - build and execute some layers in the image like move all logs to
/dev/stdout and /dev/sdterr and other
  EXPOSE    - expose these ports on the docker virtual network
  CMD       - required: run this command when container is launched; only one
CMD allowed, so if there are multiple, last one wins
  WORKDIR   - change working directory to root of nginx webhost using WORKDIR
is preferred to using 'RUN cd /some/path'
  COPY      - copy local files to image 

Building from docker file:
  docker image build -t custom_image .


**************************************
*  Assignment: Build Your Own Image  *
**************************************

Check out dockerfile-assignment-1/Dockerfile


Cleaning
- docker image prune     - to clean up just "dangling" images
- docker system prune    - will clean up everything
- docker image prune -a  - which will remove all images you're not using.
- docker system df       - to see space usage.




*******************************************************************************
*                   Container Lifetime & Persistent Data 5                    *
*******************************************************************************























